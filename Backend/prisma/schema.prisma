generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProblemDifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG
}

model User {
  id                      String       @id @default(uuid())
  avatarUrl               String       @default("https://placehold.co/500x400")
  avatarLocalPath         String       @default("")
  username                String       @unique
  email                   String       @unique
  role                    UserRole     @default(USER)
  password                String
  isEmailVerified         Boolean      @default(false)
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  refreshToken            String?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  Problem                 Problem[]
  submission              Submission[]
}

model Problem {
  id                String                 @id @default(uuid())
  title             String
  description       String
  difficulty        ProblemDifficultyLevel
  tags              String[]
  userId            String
  example           Json
  constraints       String
  hints             String?
  editorial         String?
  testcases         Json
  codeSnippets      Json
  referenceSolution Json
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission        Submission[]
}

model Submission {
  id            String           @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        Status
  memory        String?
  time          String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem       Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases     TestCaseResult[]
}

model TestCaseResult {
  id            String     @id @default(uuid())
  submissionId  String
  textCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}
